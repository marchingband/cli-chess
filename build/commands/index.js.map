{"version":3,"sources":["index.js"],"names":["odd","x","set","y","newPiece","line","i","map","piece","j","EMPTY_SQUARE","p","c","Sq","cursor","bgIsWhite","chalk","bold","initBoard","Chess","curX","setCurX","curY","setCurY","board","setBoard","moving","setMoving","mover","setMover","lastBoard","setLastBoard","_","k","return","rightArrow","leftArrow","downArrow","upArrow","escape"],"mappings":"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","file":"index.js","sourceRoot":"../../commands","sourcesContent":["import React, {useState} from 'react';\nimport {Box, Color, Static, Text, useInput} from 'ink';\nimport Gradient from 'ink-gradient';\nimport chalk from 'chalk';\n\nconst odd = x => x % 2 == 1\nconst set = (x, y, newPiece) => (line,i) => line.map((piece, j) => j==x && i==y ? newPiece : piece )\n\nconst EMPTY_SQUARE = {p:' ', c:'e'}\n\nconst Sq = ({p,cursor,bgIsWhite}) => \n\t<Color \n\t\thex={p.c=='b' ? \"#000000\" : '#FFFFFF'} \n\t\tbgHex={cursor ? '#C2BD79' : bgIsWhite ? \"#555555\" : \"#999999\"}\n\t>\n\t\t<Box width={3} justifyContent='center' alignItems='center'>\n\t\t\t{p.c=='b' ? chalk.bold(' '+p.p+' ') : ' '+p.p+' '}\n\t\t</Box>\n\t</Color>\n\nconst initBoard =  \n\t[\n\t\t['R','N','B','Q','K','B','N','R'].map(x=>({p:x, c:'w'})),\n\t\t['P','P','P','P','P','P','P','P'].map(x=>({p:x, c:'w'})),\n\t\t[' ',' ',' ',' ',' ',' ',' ',' '].map(x=>({p:x, c:'e'})),\n\t\t[' ',' ',' ',' ',' ',' ',' ',' '].map(x=>({p:x, c:'e'})),\n\t\t[' ',' ',' ',' ',' ',' ',' ',' '].map(x=>({p:x, c:'e'})),\n\t\t[' ',' ',' ',' ',' ',' ',' ',' '].map(x=>({p:x, c:'e'})),\n\t\t['P','P','P','P','P','P','P','P'].map(x=>({p:x, c:'b'})),\n\t\t['R','N','B','Q','K','B','N','R'].map(x=>({p:x, c:'b'})),\n\t]\n\nconst Chess = () => {\n\tconst [curX,setCurX] = useState(3)\n\tconst [curY,setCurY] = useState(3)\n\tconst [board,setBoard] = useState(initBoard)\n\tconst [moving,setMoving] = useState(false)\n\tconst [mover,setMover] = useState({})\n\tconst [lastBoard,setLastBoard] = useState([[]])\n\tuseInput((_,k)=>{\n\t\tif (k.return  && !moving && board[curY][curX].c=='e') return // cant pick up empty square\n\t\tk.rightArrow && curX<7  && setCurX(curX+1)\n\t\tk.leftArrow  && curX>0  && setCurX(curX-1)\n\t\tk.downArrow  && curY<7  && setCurY(curY+1)\n\t\tk.upArrow    && curY>0  && setCurY(curY-1)\n\t\tk.return     && !moving && setMover({x:curX, y:curY, piece:board[curY][curX]})\n\t\tk.return     && !moving && setLastBoard(board)\n\t\tk.return     && moving  && setBoard(board\n\t\t\t.map(set(mover.x, mover.y, EMPTY_SQUARE))\n\t\t\t.map(set(curX, curY, mover.piece))\n\t\t)\n\t\tk.return     && setMoving(!moving)\n\t\tk.escape     && setBoard(lastBoard)\n\t})\n\treturn(\n\t\t<>\n\t\t{/* <Static> */}\n\t\t\t<Text> </Text><Text> </Text><Text> </Text>\n\t\t\t<Gradient name=\"mind\"><Text>return picks up and drops pieces</Text></Gradient>\n\t\t\t<Gradient name=\"mind\"><Text>escape will undo the last move</Text></Gradient>\n\t\t\t<Text> </Text><Text> </Text>\n\t\t{/* </Static> */}\n\t\t{\n\t\t\tboard\n\t\t\t.map(moving ? set(mover.x, mover.y, EMPTY_SQUARE) : x=>x)\n\t\t\t.map(moving ? set(curX, curY, mover.piece) : x=>x)\n\t\t\t.map((line,i)=> line.map((piece,j)=>\n\t\t\t\t<Sq \n\t\t\t\t\tbgIsWhite={odd(i) == odd(j)}\n\t\t\t\t\tcursor={i==curY && j==curX} \n\t\t\t\t\tkey={j} \n\t\t\t\t\tp={piece}\n\t\t\t\t/>\n\t\t\t))\n\t\t\t.map((line,i)=><Box key={i}>{line}</Box>)\n\t\t}\n\t\t</>\n)}\n\nexport default Chess;"]}